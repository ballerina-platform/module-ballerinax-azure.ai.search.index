// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/data.jsondata;
import ballerina/http;

# Client that can be used to query an index and upload, merge, or delete documents.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(string serviceUrl, ConnectionConfig config =  {}) returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Queries the number of documents in the index.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    remote isolated function documentsCount(DocumentsCountHeaders headers = {}, *DocumentsCountQueries queries) returns int|error {
        string resourcePath = string `/docs/$count`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Searches for documents in the index.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Response containing documents that match the search criteria. 
    remote isolated function documentsSearchGet(DocumentsSearchGetHeaders headers = {}, *DocumentsSearchGetQueries queries) returns SearchDocumentsResult|error {
        string resourcePath = string `/docs`;
        map<Encoding> queryParamEncoding = {"facet": {style: FORM, explode: true}, "highlight": {style: FORM, explode: false}, "$orderby": {style: FORM, explode: false}, "scoringParameter": {style: FORM, explode: true}, "searchFields": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Searches for documents in the index.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The definition of the Search request. 
    # + return - Response containing documents that match the search criteria. 
    remote isolated function documentsSearchPost(docs_search_post_search_body payload, DocumentsSearchPostHeaders headers = {}, *DocumentsSearchPostQueries queries) returns SearchDocumentsResult|error {
        string resourcePath = string `/docs/search.post.search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Retrieves a document from the index.
    #
    # + 'key - The key of the document to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Response containing the requested document. 
    remote isolated function documentsGet(string 'key, DocumentsGetHeaders headers = {}, *DocumentsGetQueries queries) returns LookupDocument|error {
        string resourcePath = string `/docs('${getEncodedUri('key)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Suggests documents in the index that match the given partial query text.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Response containing suggested documents that match the partial input. 
    remote isolated function documentsSuggestGet(DocumentsSuggestGetHeaders headers = {}, *DocumentsSuggestGetQueries queries) returns SuggestDocumentsResult|error {
        string resourcePath = string `/docs/search.suggest`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "searchFields": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Suggests documents in the index that match the given partial query text.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The Suggest request. 
    # + return - Response containing suggested documents that match the partial input. 
    remote isolated function documentsSuggestPost(SuggestRequest payload, DocumentsSuggestPostHeaders headers = {}, *DocumentsSuggestPostQueries queries) returns SuggestDocumentsResult|error {
        string resourcePath = string `/docs/search.post.suggest`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Sends a batch of document write actions to the index.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The batch of index actions. 
    # + return - Response containing the status of operations for all actions in the batch. 
    remote isolated function documentsIndex(IndexBatch payload, DocumentsIndexHeaders headers = {}, *DocumentsIndexQueries queries) returns IndexDocumentsResult|error {
        string resourcePath = string `/docs/search.index`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Autocompletes incomplete query terms based on input text and matching terms in the index.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Response containing suggested query terms that complete the partial input. 
    remote isolated function documentsAutocompleteGet(DocumentsAutocompleteGetHeaders headers = {}, *DocumentsAutocompleteGetQueries queries) returns AutocompleteResult|error {
        string resourcePath = string `/docs/search.autocomplete`;
        map<Encoding> queryParamEncoding = {"searchFields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Autocompletes incomplete query terms based on input text and matching terms in the index.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The definition of the Autocomplete request. 
    # + return - Response containing suggested query terms that complete the partial input. 
    remote isolated function documentsAutocompletePost(AutocompleteRequest payload, DocumentsAutocompletePostHeaders headers = {}, *DocumentsAutocompletePostQueries queries) returns AutocompleteResult|error {
        string resourcePath = string `/docs/search.post.autocomplete`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }
}
